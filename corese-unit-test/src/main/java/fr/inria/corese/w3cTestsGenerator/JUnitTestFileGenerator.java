package fr.inria.corese.w3cTestsGenerator;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDate;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import fr.inria.corese.w3cTestsGenerator.w3cTests.IW3cTest;

/**
 * Generates a JUnit test file for the W3C test suite.
 */
public class JUnitTestFileGenerator {

    private static final Logger logger = LogManager.getLogger(JUnitTestFileGenerator.class);

    private final URI manifestUri;
    private final String testName;
    private final List<IW3cTest> tests;

    public JUnitTestFileGenerator(String testName, URI manifestUri, List<IW3cTest> tests) {
        this.testName = testName;
        this.manifestUri = manifestUri;
        this.tests = tests;
    }

    /**
     * Generates a JUnit test file for the W3C test suite.
     * 
     * @param testsPath The path to the directory where the test file should be
     *                  generated.
     */
    public void generate(Path testsPath) {

        // Initialize directories
        Path testDirectory = this.createDirectory(testsPath.resolve(testName));

        // Generate file test
        String fileName = testName + "Test.java";
        Path testFile = this.generateTestFile(testDirectory, fileName);

        // Write test file
        try {
            Files.write(testFile, this.generateTestFileContent(testFile.toString(), fileName).getBytes());
            logger.info("Wrote test file: " + testFile);
        } catch (IOException e) {
            logger.error("Failed to write test file: " + testFile, e);
        }

    }

    /**
     * Creates a directory at the specified path if it does not already exist.
     * 
     * @param directoryPath The path to the directory to create.
     * @param directoryType The type of directory to create.
     */
    private Path createDirectory(Path directoryPath) {
        if (!Files.exists(directoryPath)) {
            try {
                Files.createDirectories(directoryPath);
                logger.info("Created directory: " + directoryPath);
            } catch (IOException e) {
                logger.error("Failed to create directory: " + directoryPath, e);
            }
        }
        return directoryPath;
    }

    /**
     * Generates a test file at the specified path if it does not already exist.
     * 
     * @param testDirectory The directory where the test file should be generated.
     * @param fileName      The name of the test file.
     * @return The path to the test file.
     */
    private Path generateTestFile(Path testDirectory, String fileName) {
        Path filePath = testDirectory.resolve(fileName);

        if (Files.exists(filePath)) {
            return filePath;
        }

        try {
            Files.createFile(filePath);
            logger.info("Created test file: " + filePath);
        } catch (IOException e) {
            logger.error("Failed to create test file: " + filePath, e);
        }
        return filePath;
    }

    /**
     * Generates the content of the test file.
     * 
     * @param path     The path of the file.
     * @param fileName The name of the file.
     * @return The content of the test file.
     */
    private String generateTestFileContent(String path, String fileName) {
        StringBuilder content = new StringBuilder();

        // Package
        content.append(this.getPackage(path, fileName));
        content.append("\n");
        content.append("\n");

        // Imports
        Set<String> imports = new HashSet<>();
        for (IW3cTest test : tests) {
            imports.addAll(test.getImports());
        }
        imports.stream().sorted().forEach(imp -> content.append("import ").append(imp).append(";\n"));
        content.append("\n");

        // Class comment
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
        ZonedDateTime nowWithZone = ZonedDateTime.now();

        content.append("/**\n");
        content.append(" * Auto-generated JUnit test file for the W3C test suite: ");
        content.append(manifestUri);
        content.append("\n");
        content.append(" * This file was automatically generated by JUnitTestFileGenerator.java.\n");
        content.append(" * Generation date: ");
        content.append(LocalDate.now());
        content.append(", Time: ");
        content.append(nowWithZone.format(timeFormatter));
        content.append(" ");
        content.append(nowWithZone.getZone());
        content.append("\n");
        content.append(" */\n");

        // Class declaration
        content.append("public class ");
        content.append(fileName.substring(0, fileName.indexOf(".")));
        content.append(" {");
        content.append("\n");
        content.append("\n");

        // Test methods
        for (IW3cTest test : tests) {
            content.append(test.generate());
            content.append("\n");
        }

        // End of class
        content.append("}");

        return content.toString();
    }

    /**
     * Returns the package declaration based on the given path and file name.
     * 
     * @param path     The path of the file.
     * @param fileName The name of the file.
     * @return The package declaration.
     */
    private String getPackage(String path, String fileName) {
        String packagePath = path.substring(path.indexOf("java") + 5)
                .replace("/", ".")
                .replace("." + fileName, "");
        return "package " + packagePath + ";";
    }

}
